// Fix: Import express module directly to namespace its types and avoid conflicts with global types.
import express from 'express';
import cors from 'cors';
import fs from 'fs/promises';
import path from 'path';
import bcrypt from 'bcryptjs';
import jwt from 'jsonwebtoken';
import { v4 as uuidv4 } from 'uuid';
import axios from 'axios';
import dotenv from 'dotenv';

dotenv.config();

// Fix: Explicitly type the Express app instance using the namespaced type.
const app: express.Express = express();
const PORT = 3001;
const DB_PATH = path.join(__dirname, '..', 'db.json');
const JWT_SECRET = process.env.JWT_SECRET || 'fallback-secret-key';

// --- –ú–∏–¥–ª–≤–∞—Ä—ã ---
app.use(cors());
app.use(express.json());

// --- –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö ---
interface User {
    id: string;
    name: string;
    email: string;
    passwordHash: string;
}

// --- –•–µ–ª–ø–µ—Ä—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ë–î ---
async function readDB() {
    try {
        const data = await fs.readFile(DB_PATH, 'utf-8');
        return JSON.parse(data);
    } catch (error) {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return { users: [] };
    }
}

async function writeDB(data: any) {
    await fs.writeFile(DB_PATH, JSON.stringify(data, null, 2));
}

// --- Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞ ---
// Fix: Use namespaced Express types for request, response, and next function.
const authenticateToken = (req: express.Request, res: express.Response, next: express.NextFunction) => {
    const authHeader = req.headers['authorization'];
    const token = authHeader && authHeader.split(' ')[1];

    if (token == null) {
        return res.status(401).json({ message: 'Token not provided' });
    }

    jwt.verify(token, JWT_SECRET, (err: any, user: any) => {
        if (err) {
            return res.status(403).json({ message: 'Invalid token' });
        }
        (req as any).user = user;
        next();
    });
};


// --- –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê: –°–ù–ê–ß–ê–õ–ê API, –ü–û–¢–û–ú –°–¢–ê–¢–ò–ö–ê, –ü–û–¢–û–ú SPA ---

// 1. –ú–∞—Ä—à—Ä—É—Ç—ã API
const apiRouter = express.Router();

// 1.1 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// Fix: Use namespaced Express types for request and response.
apiRouter.post('/auth/register', async (req: express.Request, res: express.Response) => {
    const { name, email, password } = req.body;

    if (!name || !email || !password) {
        return res.status(400).json({ message: 'Name, email, and password are required' });
    }

    const db = await readDB();
    const existingUser = db.users.find((user: User) => user.email === email);
    if (existingUser) {
        return res.status(409).json({ message: 'User with this email already exists' });
    }

    const passwordHash = await bcrypt.hash(password, 10);
    const newUser: User = {
        id: uuidv4(),
        name,
        email,
        passwordHash,
    };

    db.users.push(newUser);
    await writeDB(db);

    const userPayload = { id: newUser.id, name: newUser.name, email: newUser.email };
    const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '1d' });

    res.status(201).json({ user: userPayload, token });
});

// 1.2 –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)
// Fix: Use namespaced Express types for request and response.
apiRouter.post('/auth/login', async (req: express.Request, res: express.Response) => {
    const { email, password } = req.body;
    
    if (!email || !password) {
        return res.status(400).json({ message: 'Email and password are required' });
    }

    const db = await readDB();
    const user = db.users.find((u: User) => u.email === email);

    if (!user) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.passwordHash);
    if (!isPasswordValid) {
        return res.status(401).json({ message: 'Invalid credentials' });
    }

    const userPayload = { id: user.id, name: user.name, email: user.email };
    const token = jwt.sign(userPayload, JWT_SECRET, { expiresIn: '1d' });

    res.json({ user: userPayload, token });
});

// 1.3 –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç)
// Fix: Use namespaced Express types for request and response.
apiRouter.get('/auth/me', authenticateToken, async (req: express.Request, res: express.Response) => {
    const userId = (req as any).user.id;
    const db = await readDB();
    const user = db.users.find((u: User) => u.id === userId);

    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è
    res.json({ id: user.id, name: user.name, email: user.email });
});

// 1.4 –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤
// Fix: Use namespaced Express types for request and response.
apiRouter.post('/notifications/withdraw', async (req: express.Request, res: express.Response) => {
    const { amount, address } = req.body;

    if (!amount || !address) {
        return res.status(400).json({ message: 'Amount and address are required.' });
    }

    const botToken = process.env.TELEGRAM_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID;

    if (!botToken || !chatId) {
        console.error("Telegram credentials are not configured in .env file");
        return res.status(500).json({ message: 'Server configuration error.' });
    }

    const message = `
    üö® *New Withdrawal Request* üö®

    *Amount:* ${amount} USD
    *Address:* \`${address}\`

    Please review and process this request.
  `;

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    try {
        await axios.post(url, {
            chat_id: chatId,
            text: message,
            parse_mode: 'Markdown',
        });
        res.json({ success: true, message: 'Notification sent successfully.' });
    } catch (error) {
        console.error('Error sending Telegram message:', error);
        res.status(500).json({ message: 'Failed to send notification.' });
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö—Å—è —Å /api
app.use('/api', apiRouter);


// 2. –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const staticFilesPath = path.join(__dirname, '..', '..');
app.use(express.static(staticFilesPath, {
  // Fix: Use namespaced Express type for the `res` object.
  setHeaders: (res: express.Response, filePath) => {
    // –≠—Ç–æ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–µ–Ω, —á—Ç–æ–±—ã –±—Ä–∞—É–∑–µ—Ä –º–æ–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç—å TSX-—Ñ–∞–π–ª –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç.
    if (filePath.endsWith('.tsx') || filePath.endsWith('.ts')) {
      res.setHeader('Content-Type', 'application/javascript');
    }
  }
}));

// 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è React Router (SPA Fallback)
// –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ü–û–°–õ–ï–î–ù–ò–ú.
// Fix: Use namespaced Express types for request and response.
app.get('*', (req: express.Request, res: express.Response) => {
    res.sendFile(path.join(staticFilesPath, 'index.html'));
});


// --- –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
app.listen(PORT, () => {
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É http://localhost:${PORT}`);
    console.log(`–°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}`);
});
